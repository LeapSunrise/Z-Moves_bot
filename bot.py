import datetime
import os
import time
import src.config.config as config

import telebot_calendar
from telebot.types import ReplyKeyboardRemove, CallbackQuery
from telebot_calendar import CallbackData

from src.schedule_parser.schedule_parser import *
from src.service import keyboard_generator, stateworker, service
from src.service.buttons import *

bot = telebot.TeleBot(config.BOT_TOKEN)
# db.init_db()
lorem_ipsum = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
"""#####################################################################################################################
                                                    START
#####################################################################################################################"""


# @bot.message_handler(func=lambda message: rozklad_api_work_checker() is False)
# def long_request(message):
#
#     bot.send_message(message.chat.id,
#                      f"–ô–æ–æ–æ–æ–π.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É..\n"
#                      f"–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ö–ü–ò –Ω–∞–∏–≤—Å—è –∏ —Å–ø—ã—Ç—å ü§ß\n"
#                      f"–ú–æ–∂–µ—à—å –ø–æ–∑–∞–ª–∏–ø–∞—Ç—å –ø–æ–∫–∞ –Ω–∞ –¥–∏–Ω–æ, –∞ —è –ø–æ–ø—Ä–æ–±—É—é —Ç–µ–±—è —É–≤–µ–¥–æ–º–∏—Ç—å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–ø–∏—à–∫–∞ –≤—Å—Ç–∞–Ω–µ—Ç :(",
#                      reply_markup=telebot.types.ForceReply(),
#                      )
#     bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEB9bhgQ6DCUQz5y_Mh7uwdvVxAWMiosgACEQAD1gWXKgGow7AQ9URiHgQ', reply_markup=telebot.types.ForceReply())
#
#
#
# @bot.message_handler(func=lambda message: rozklad_api_work_checker() is True)
# def good_request(message):
#     bot.send_message(message.chat.id, '–£–†–†–ê–ê–ê, –ê–ü–ò–®–ö–ê –í–°–¢–ê–õ–ê –ü–ò–ó–î–ï–¶!',
#                      reply_markup=keyboard_generator.main_menu_keyboard)


@bot.message_handler(func=lambda message: db.get_blocked_user(message.chat.id) is not None and
                                          message.chat.id in db.get_blocked_user(message.chat.id))
def black_list(message):
    user_name = message.from_user.first_name
    if message.from_user.last_name:
        user_name = f"{user_name} {message.from_user.last_name}"
    db.update_blocked_users(message.chat.id,
                            user_name,
                            time.strftime('%d/%m/%y, %X'),
                            time.strftime('%d/%m/%y, %X'))
    bot.send_sticker(message.chat.id,
                     'CAACAgIAAxkBAAEB9bhgQ6DCUQz5y_Mh7uwdvVxAWMiosgACEQAD1gWXKgGow7AQ9URiHgQ')
    bot.send_message(message.chat.id,
                     '–°–æ—Ä—è–Ω, –Ω–æ —Ç—ã –≤ –ß–° üò¢',
                     reply_markup=telebot.types.ReplyKeyboardRemove())


@bot.message_handler(commands=['start', 'START'])
def start_message(message):
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏–≤–µ—Ç,  ü•¥ü§ô\nZ-Moves –Ω–∞ —Å–≤—è–∑–∏ üòé\n\n"
                     f"–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.\n\n–ü—Ä–∏–º–µ—Ä: <b>IO-83</b>",
                     parse_mode='HTML')


    # service.rozklad_api_work_checker()
    # user_name = message.from_user.first_name
    # if message.from_user.last_name:
    #     user_name = f"{user_name} {message.from_user.last_name}"
    #
    # if db.get_user_info(message.chat.id) is None:
    #     bot.send_message(message.chat.id,
    #                      f"–ü—Ä–∏–≤–µ—Ç, {user_name}! ü•¥ü§ô\nZ-Moves –Ω–∞ —Å–≤—è–∑–∏ üòé\n\n"
    #                      f"–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.\n\n–ü—Ä–∏–º–µ—Ä: <b>IO-83</b>",
    #                      parse_mode='HTML')
    #     db.register_user(message.chat.id,
    #                      message.from_user.username,
    #                      stateworker.States.S_REGISTRATION.value,
    #                      time.strftime('%d/%m/%y, %X'),
    #                      time.strftime('%d/%m/%y, %X'))
    #     print(db.get_user_info(message.chat.id))
    #
    # elif db.get_user_info(message.chat.id)[2] is None:
    #     bot.send_message(message.chat.id,
    #                      "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è. –í–≤–µ–¥–∏ –≥—Ä—É–ø–ø—É –ø–ª–µ—Å")
    #
    #
    # else:
    #     bot.send_message(message.chat.id,
    #                      "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    #                      reply_markup=keyboard_generator.main_menu_keyboard)
    #     db.set_state(message.from_user.username,
    #                  stateworker.States.S_MAIN_MENU.value,
    #                  time.strftime('%d/%m/%y, %X'),
    #                  message.chat.id)


@bot.message_handler(func=lambda message: (db.get_state(message.chat.id).__class__ == tuple and
                                           (db.get_state(message.chat.id)[
                                                0] == stateworker.States.S_REGISTRATION.value or
                                            db.get_state(message.chat.id)[
                                                0] == stateworker.States.S_CHANGE_GROUP.value)))
def group_registration(message):
    if Schedule.is_group_exist(message.text):
        bot.send_message(message.chat.id,
                         f"–ï—Å—Ç—å —Ç–∞–∫–∞—è! –ù—É –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º üôÇ",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.register_user_group_name(message.from_user.username,
                                    message.text,
                                    stateworker.States.S_MAIN_MENU.value,
                                    time.strftime('%d/%m/%y, %X'),
                                    message.chat.id)

    elif message.text == cancel_button:
        bot.send_message(message.chat.id,
                         "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                         reply_markup=keyboard_generator.settings_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SETTINGS_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    else:
        bot.send_message(message.chat.id,
                         f"<b>{message.text}</b>? –ß—Ç–æ-—Ç–æ —è –æ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –µ—â—ë –Ω–µ —Å–ª—ã—à–∞–ª ü§•",
                         parse_mode='HTML')
        db.set_state(message.from_user.username,
                     stateworker.States.S_REGISTRATION.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)


"""#####################################################################################################################
                                                    MAIN MENU
#####################################################################################################################"""


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_MAIN_MENU.value)
def main_menu(message):
    db.auto_remove_hotline()
    if message.text == schedule_button:
        bot.send_message(message.chat.id,
                         f"–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                         reply_markup=keyboard_generator.schedule_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SCHEDULE_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == settings_button:
        bot.send_message(message.chat.id,
                         f"–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
                         reply_markup=keyboard_generator.settings_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SETTINGS_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == links_button:
        bot.send_message(message.chat.id,
                         f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º, –∏–∑–º–µ–Ω—è—Ç—å –∏ –¥–∞–∂–µ –∏—Ö —É–¥–∞–ª—è—Ç—å, "
                         f"–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.",
                         reply_markup=service.dynamic_menu_links_inline_keyboard_generator(message.chat.id))
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == hotlines_button:
        bot.send_message(message.chat.id,
                         f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ö–æ—Ç–ª–∞–π–Ω—ã (–¥–µ–¥–ª–∞–π–Ω—ã - –ø–ª–æ—Ö–æ) –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º",
                         reply_markup=service.dynamic_menu_hotlines_inline_keyboard_generator(message.chat.id))
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == mails_button:
        bot.reply_to(message,
                     service.not_available_reply)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == info_button:
        info_button_reply = f"–¢—ã –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ø–æ–¥ –≥—Ä—É–ø–ø–æ–π: <b>{db.get_user_info(message.chat.id)[2]}</b>\n\n" \
                            f"–û–±–æ –º–Ω–µ:\n\n" \
                            f"–Ø ‚Äî <b>Z-Moves</b>, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ –ó–ú, –∏—Å—Ç–∏–Ω–Ω—ã–π –≤–ª–∞–¥—ã–∫–∞ —Å–µ–º–∏ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤ –∏ ... \n" \
                            f"–í–ø—Ä–æ—á–µ–º, —ç—Ç–æ —É–∂–µ —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–∞—è –∏—Å—Ç–æ—Ä–∏—è.\n\n" \
                            f"–Ø –æ–±—ã—á–Ω—ã–π –±–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Å–∫–∞–∂—É—Ç —Ö–µ–π—Ç–µ—Ä—ã. –ù–æ –∫–∞–∫ –±—ã –Ω–µ —Ç–∞–∫. " \
                            f"–°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å:\n\n" \
                            f"1. –ü—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ üîó –∫ –ø–∞—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–æ–π —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ –∏ –¥–æ–ª–≥–æ –∏—Å–∫–∞—Ç—å.\n" \
                            f"2. üë∫ –•–æ—Ç–ª–∞–π–Ω—ã. –¢—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –≤ —Å–∏—é –º–∏–Ω—É—Ç—É —É–∑–Ω–∞—Ç—å –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é " \
                            f"–ª–∞–±—É –ø–æ –í–∑–ª–æ–º—É –ñ–æ–ø—ã üßë‚Äçüíª\n" \
                            f"3. –¢–∞–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç—ã –µ—â—ë –Ω–µ –≤–∏–¥–µ–ª üòé\n" \
                            f"4. –ò —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ ü§Ø –Ø –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å –∏ –¥–æ–±–∞–≤–ª—è—é –≤ —Å–µ–±—è –Ω–æ–≤—ã–µ —Ñ–∏—á–∏, –∫–æ—Ç–æ—Ä—ã–µ " \
                            f"–±—É–¥—É—Ç —Ä–∞–¥–æ–≤–∞—Ç—å —Ç–µ–±—è –≤—Å—ë –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ ü§ì\n" \
                            f"5. –•–≤–∞—Ç–∏—Ç —á–∏—Ç–∞—Ç—å! –î–∞–≤–∞–π –±–µ–≥–æ–º —Å—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å ü•¥\n\n" \
                            f"–î–∞, –∏ —á—É—Ç—å –Ω–µ –∑–∞–±—ã–ª. <a href='https://send.monobank.ua/jar/9RyLwakdWd'>–¢—É—Ç</a> –º–æ–∂–Ω–æ " \
                            f"—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ —Å–ø–∞—Å–∏–±–æ.\nüëâüëà" \

        bot.send_message(message.chat.id,
                         info_button_reply,
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML',
                         disable_web_page_preview=True)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == help_button:
        bot.reply_to(message,
                     service.not_available_reply)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)


user_links_dict = {}
user_hotlines_dict = {}

"""#####################################################################################################################
                                                    MAIN MENU/LINKS MENU
#####################################################################################################################"""

calendar_1 = CallbackData("calendar_1", "action", "year", "month", "day")
calendar_keyboard = telebot_calendar.create_calendar(name=calendar_1.prefix,
                                                     year=datetime.datetime.now().year,
                                                     month=datetime.datetime.now().month, )


@bot.callback_query_handler(func=lambda call: call.data.startswith(calendar_1.prefix) == False)
def links_menu(call):
    inline_subject_keyboard_to_add_link = service.generate_inline_subjects_to_add_link(call.message.chat.id)
    inline_linked_subject_keyboard_to_ch = service.generate_inline_linked_subjects_to_change(call.message.chat.id)
    inline_linked_subject_keyboard_to_rm = service.generate_inline_linked_subjects_to_remove(call.message.chat.id)

    inline_subject_keyboard_to_add_hotline = service.generate_inline_subjects_to_add_hotline(call.message.chat.id)
    inline_hotlined_subject_keyboard_to_ch = service.generate_inline_hotlined_subjects_to_change(call.message.chat.id)
    inline_hotlined_subject_keyboard_to_rm = service.generate_inline_hotlined_subjects_to_remove(call.message.chat.id)

    inline_subject_type_keyboard = telebot.types.InlineKeyboardMarkup()
    inline_subject_type_keyboard.add(inline_lec_button, inline_lab_button, inline_prac_button)
    inline_subject_type_keyboard.add(inline_second_back_button)

    inline_confirm_cancel_keyboard = telebot.types.InlineKeyboardMarkup()
    inline_confirm_cancel_keyboard.add(inline_remove_link_cancel_button, inline_remove_link_confirm_button)

    inline_confirm_cancel_keyboard_hl = telebot.types.InlineKeyboardMarkup()
    inline_confirm_cancel_keyboard_hl.add(inline_remove_hotline_cancel_button, inline_remove_hotline_confirm_button)

    if call.data == 'add_link' or call.data == 'second_back_button':
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_subject_keyboard_to_add_link,
                              parse_mode='HTML')

    if call.data == 'add_hotline':
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç–ª–∞–π–Ω",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_subject_keyboard_to_add_hotline,
                              parse_mode='HTML')

    if call.data == 'change_link':
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_linked_subject_keyboard_to_ch,
                              parse_mode='HTML')

    if call.data == 'change_hotline':
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ö–æ—Ç–ª–∞–π–Ω",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_hotlined_subject_keyboard_to_ch,
                              parse_mode='HTML')

    if call.data == 'remove_link':
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_linked_subject_keyboard_to_rm,
                              parse_mode='HTML')

    if call.data == 'remove_hotline':
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ —Ö–æ—Ç–ª–∞–π–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_hotlined_subject_keyboard_to_rm,
                              parse_mode='HTML')

    if call.data == 'first_back_button':
        bot.edit_message_text(f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º, –∏–∑–º–µ–Ω—è—Ç—å –∏ –¥–∞–∂–µ –∏—Ö —É–¥–∞–ª—è—Ç—å, "
                              f"–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=service.dynamic_menu_links_inline_keyboard_generator(call.message.chat.id),
                              parse_mode='HTML')

    if call.data == 'first_back_button_hl':
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç–ª–∞–π–Ω",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=service.dynamic_menu_hotlines_inline_keyboard_generator(
                                  call.message.chat.id),
                              parse_mode='HTML')

    # jump to ADD_LINK state
    if inline_subject_keyboard_to_add_link != '' and call.data in [button['callback_data'] for buttons in
                                                                   inline_subject_keyboard_to_add_link.to_dict()[
                                                                       'inline_keyboard']
                                                                   for button in buttons]:
        print(inline_subject_keyboard_to_add_link.to_dict()['inline_keyboard'])
        for buttons in inline_subject_keyboard_to_add_link.to_dict()['inline_keyboard'][
                       :len(inline_subject_keyboard_to_add_link.to_dict()[
                                'inline_keyboard']) - 1]:  # —Ç—É—Ç -1 —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏–ª–∞—Å—å –±—ç–∫-–∫–Ω–æ–ø–∫–∞

            for button in buttons:
                if button['callback_data'] == call.data:
                    user_links_dict.update({call.message.chat.id: {
                        'addition_date': '',
                        'subject': button['text'],
                        'subject_type': '',
                        'link': '',
                        'password': '',
                    }})

                    bot.edit_message_text(f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n\n"
                                          f"–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è üôÉ",
                                          chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=inline_subject_type_keyboard,
                                          parse_mode='HTML')

    if inline_subject_type_keyboard != '' and call.data in [button['callback_data'] for buttons in
                                                            inline_subject_type_keyboard.to_dict()['inline_keyboard']
                                                            for button in buttons]:
        for button in inline_subject_type_keyboard.to_dict()['inline_keyboard'][
            0]:  # —Ç—É—Ç [0] —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏–ª–∞—Å—å –±—ç–∫-–∫–Ω–æ–ø–∫–∞
            if button['callback_data'] == call.data:
                user_links_dict[call.message.chat.id]['subject_type'] = button['text']
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                keyboard = keyboard_generator.generate_default_keyboard(cancel_button)
                bot.send_message(call.message.chat.id,
                                 f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                 f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n\n"
                                 f"–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ—à—É —Å–∫–∏–Ω—É—Ç—å –º–Ω–µ —Å—Å—ã–ª–æ—á–∫—É ü§ì",
                                 reply_markup=keyboard,
                                 parse_mode='HTML')
                db.set_state(call.from_user.username,
                             stateworker.States.S_INPUT_LINK.value,
                             time.strftime('%d/%m/%y, %X'),
                             call.message.chat.id)

    # jump to CHANGE_LINK state

    if inline_linked_subject_keyboard_to_ch != '' and \
            call.data in [button['callback_data'] for buttons in
                          inline_linked_subject_keyboard_to_ch.to_dict()['inline_keyboard'] for button in buttons]:
        for buttons in inline_linked_subject_keyboard_to_ch.to_dict()['inline_keyboard'][
                       :len(inline_linked_subject_keyboard_to_ch.to_dict()[
                                'inline_keyboard']) - 1]:  # —Ç—É—Ç -1 —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏–ª–∞—Å—å –±—ç–∫-–∫–Ω–æ–ø–∫–∞
            for button in buttons:

                if button['callback_data'] == call.data:

                    user_links_dict.update({call.message.chat.id: {  # –∫–æ–ª–¥–∞—Ç–∞ –ø–æ—Å–ª–µ _
                        'subject': button['text'][button['text'].find('-') + 2:],  # –ø–æ—Å–ª–µ -+–ø—Ä–æ–±–µ–ª
                        'subject_type': button['text'][:button['text'].find(' ')],  # –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞
                        'addition_date': button['callback_data'][button['callback_data'].find('_') + 1:]
                        # –∫–æ–ª–¥–∞—Ç–∞ –ø–æ—Å–ª–µ _
                    }})

                    user_links_dict[call.message.chat.id]['link'] = db.get_links_to_change(call.message.chat.id,
                                                                                           user_links_dict[
                                                                                               call.message.chat.id][
                                                                                               'subject'],
                                                                                           user_links_dict[
                                                                                               call.message.chat.id][
                                                                                               'subject_type'],
                                                                                           user_links_dict[
                                                                                               call.message.chat.id][
                                                                                               'addition_date'])[3]

                    user_links_dict[call.message.chat.id]['password'] = db.get_links_to_change(call.message.chat.id,
                                                                                               user_links_dict[
                                                                                                   call.message.chat.id][
                                                                                                   'subject'],
                                                                                               user_links_dict[
                                                                                                   call.message.chat.id][
                                                                                                   'subject_type'],
                                                                                               user_links_dict[
                                                                                                   call.message.chat.id][
                                                                                                   'addition_date'])[4]

                    bot.delete_message(chat_id=call.message.chat.id,
                                       message_id=call.message.message_id)

                    if user_links_dict[call.message.chat.id]['password'] == '':
                        bot.send_message(call.message.chat.id,
                                         f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                         f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n"
                                         f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[call.message.chat.id]['link']}</b>\n",
                                         reply_markup=keyboard_generator.generate_default_keyboard_row(
                                             (add_password_button, confirm_button),
                                             (cancel_button,)),
                                         parse_mode='HTML',
                                         disable_web_page_preview=True)

                    elif user_links_dict[call.message.chat.id]['password'] != '':
                        bot.send_message(call.message.chat.id,
                                         f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                         f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n"
                                         f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[call.message.chat.id]['link']}</b>\n"
                                         f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[call.message.chat.id]['password']}</b>\n",
                                         reply_markup=keyboard_generator.generate_default_keyboard_row(
                                             (change_password_button, confirm_button),
                                             (cancel_button,)),
                                         parse_mode='HTML',
                                         disable_web_page_preview=True)

                    db.set_state(call.message.from_user.username,
                                 stateworker.States.S_CHANGE_LINK.value,
                                 time.strftime('%d/%m/%y, %X'),
                                 call.message.chat.id)

    # remove link
    if inline_linked_subject_keyboard_to_rm != '' and \
            call.data in [button['callback_data'] for buttons in
                          inline_linked_subject_keyboard_to_rm.to_dict()['inline_keyboard'] for button in buttons]:
        for buttons in inline_linked_subject_keyboard_to_rm.to_dict()['inline_keyboard'][
                       :len(inline_linked_subject_keyboard_to_rm.to_dict()[
                                'inline_keyboard']) - 1]:  # —Ç—É—Ç -1 —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏–ª–∞—Å—å –±—ç–∫-–∫–Ω–æ–ø–∫–∞
            for button in buttons:
                if button['callback_data'] == call.data:
                    user_links_dict.update({call.message.chat.id: {
                        'subject': button['text'][int(button['text'].find('-')) + 2:],  # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ '- '
                        'subject_type': button['text'][:int(button['text'].find(' '))],  # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ ' '
                        'link': '',
                        'password': '',
                        'addition_date': button['callback_data'][button['callback_data'].find('_') + 1:]
                    }})
                    user_links_dict[call.message.chat.id]['link'] = \
                        db.get_links_to_change(call.message.chat.id,
                                               user_links_dict[call.message.chat.id]['subject'],
                                               user_links_dict[call.message.chat.id]['subject_type'],
                                               user_links_dict[call.message.chat.id]['addition_date'])[3]  # 3 - —Å—Å—ã–ª–∫–∞
                    user_links_dict[call.message.chat.id]['password'] = \
                        db.get_links_to_change(call.message.chat.id,
                                               user_links_dict[call.message.chat.id]['subject'],
                                               user_links_dict[call.message.chat.id]['subject_type'],
                                               user_links_dict[call.message.chat.id]['addition_date'])[4]  # 4 - –ø–∞—Ä–æ–ª—å

                    if user_links_dict[call.message.chat.id]['password'] == '':
                        bot.edit_message_text(f"–¢—ã —É–¥–∞–ª—è–µ—à—å:\n"
                                              f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                              f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n"
                                              f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[call.message.chat.id]['link']}</b>\n",
                                              chat_id=call.message.chat.id,
                                              message_id=call.message.message_id,
                                              reply_markup=inline_confirm_cancel_keyboard,
                                              parse_mode='HTML',
                                              disable_web_page_preview=True)

                    elif user_links_dict[call.message.chat.id]['password'] != '':
                        bot.edit_message_text(f"–¢—ã —É–¥–∞–ª—è–µ—à—å:\n"
                                              f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                              f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n"
                                              f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[call.message.chat.id]['link']}</b>\n"
                                              f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[call.message.chat.id]['password']}</b>",
                                              chat_id=call.message.chat.id,
                                              message_id=call.message.message_id,
                                              reply_markup=inline_confirm_cancel_keyboard,
                                              parse_mode='HTML',
                                              disable_web_page_preview=True)

    if call.data == 'confirm_remove_link':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        db.remove_link(call.message.chat.id,
                       user_links_dict[call.message.chat.id]['subject'],
                       user_links_dict[call.message.chat.id]['subject_type'],
                       user_links_dict[call.message.chat.id]['addition_date'])

        bot.send_message(call.message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ <i>'{user_links_dict[call.message.chat.id]['link']}'</i> –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç "
                         f"'<b>{user_links_dict[call.message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[call.message.chat.id]['subject']}</b>' "
                         f"—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML',
                         disable_web_page_preview=True)

    if call.data == 'cancel_remove_link':
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_linked_subject_keyboard_to_rm,
                              parse_mode='HTML')

    if call.data == 'confirm_remove_hotline':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        db.remove_hotline(call.message.chat.id,
                          user_hotlines_dict[call.message.chat.id]['subject'],
                          user_hotlines_dict[call.message.chat.id]['description'],
                          user_hotlines_dict[call.message.chat.id]['date'],
                          user_hotlines_dict[call.message.chat.id]['addition_date'])

        bot.send_message(call.message.chat.id,
                         f"–•–æ—Ç–ª–∞–π–Ω {user_hotlines_dict[call.message.chat.id]['subject']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")

    if call.data == 'cancel_remove_hotline':
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ —Ö–æ—Ç–ª–∞–π–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_hotlined_subject_keyboard_to_rm,
                              parse_mode='HTML')

    if inline_subject_keyboard_to_add_hotline != '' and \
            call.data in [button['callback_data'] for buttons in
                          inline_subject_keyboard_to_add_hotline.to_dict()['inline_keyboard'] for button in buttons]:
        for buttons in inline_subject_keyboard_to_add_hotline.to_dict()['inline_keyboard'][
                       :len(inline_subject_keyboard_to_add_hotline.to_dict()['inline_keyboard']) - 1]:
            for button in buttons:
                if button['callback_data'] == call.data:
                    user_hotlines_dict.update({call.message.chat.id: {
                        'subject': button['text'],
                        'description': '',
                        'date': '',
                    }})
                    bot.edit_message_text(f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_hotlines_dict[call.message.chat.id]['subject']}</b>\n\n"
                                          f"–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è —Ö–æ—Ç–ª–∞–π–Ω–∞",
                                          chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=calendar_keyboard,
                                          parse_mode='HTML')

    if inline_hotlined_subject_keyboard_to_ch != '' and \
            call.data in [button['callback_data'] for buttons in
                          inline_hotlined_subject_keyboard_to_ch.to_dict()['inline_keyboard'] for button in buttons]:

        for buttons in inline_hotlined_subject_keyboard_to_ch.to_dict()['inline_keyboard'][
                       :len(inline_hotlined_subject_keyboard_to_ch.to_dict()['inline_keyboard']) - 1]:
            for button in buttons:
                if button['callback_data'] == call.data:
                    user_hotlines_dict.update({call.message.chat.id: {
                        'subject': button['text'][button['text'].find('-') + 2:],
                        'description': '',
                        'date': '',
                        'addition_date': button['callback_data'][button['callback_data'].find('_') + 1:]
                    }})

                    user_hotlines_dict[call.message.chat.id]['description'] = \
                        db.get_hotlines_to_change(call.message.chat.id,
                                                  user_hotlines_dict[call.message.chat.id]['subject'],
                                                  user_hotlines_dict[call.message.chat.id]['addition_date'])[0]
                    user_hotlines_dict[call.message.chat.id]['date'] = db.get_hotlines_to_change(call.message.chat.id,
                                                                                                 user_hotlines_dict[
                                                                                                     call.message.chat.id][
                                                                                                     'subject'],
                                                                                                 user_hotlines_dict[
                                                                                                     call.message.chat.id][
                                                                                                     'addition_date'])[
                        1]
                    bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è —Ö–æ—Ç–ª–∞–π–Ω–∞",
                                          chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=calendar_keyboard,
                                          parse_mode='HTML',
                                          disable_web_page_preview=True)

    if inline_hotlined_subject_keyboard_to_rm != '' and call.data in [button['callback_data'] for buttons in
                                                                      inline_hotlined_subject_keyboard_to_rm.to_dict()[
                                                                          'inline_keyboard'][:len(
                                                                          inline_hotlined_subject_keyboard_to_rm.to_dict()[
                                                                              'inline_keyboard']) - 1] for button in
                                                                      buttons]:
        for buttons in inline_hotlined_subject_keyboard_to_rm.to_dict()['inline_keyboard'][
                       :len(inline_hotlined_subject_keyboard_to_rm.to_dict()['inline_keyboard']) - 1]:
            for button in buttons:
                if button['callback_data'] == call.data:
                    user_hotlines_dict.update({call.message.chat.id: {
                        'subject': button['text'][button['text'].find('-') + 2:],
                        'description': '',
                        'date': '',
                        'addition_date': button['callback_data'][button['callback_data'].find('_') + 1:]
                    }})

                    user_hotlines_dict[call.message.chat.id]['description'] = \
                        db.get_hotlines_to_change(call.message.chat.id,
                                                  user_hotlines_dict[call.message.chat.id]['subject'],
                                                  user_hotlines_dict[call.message.chat.id]['addition_date'])[0]

                    user_hotlines_dict[call.message.chat.id]['date'] = \
                        db.get_hotlines_to_change(call.message.chat.id,
                                                  user_hotlines_dict[call.message.chat.id]['subject'],
                                                  user_hotlines_dict[call.message.chat.id]['addition_date'])[1]

                    bot.edit_message_text(f"–¢—ã —É–¥–∞–ª—è–µ—à—å —Ö–æ—Ç–ª–∞–π–Ω:\n\n"
                                          f"{lorem_ipsum}",
                                          chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=inline_confirm_cancel_keyboard_hl,
                                          parse_mode='HTML',
                                          disable_web_page_preview=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith(calendar_1.prefix))
def input_hotline_date(call: CallbackQuery):
    name, action, year, month, day = call.data.split(calendar_1.sep)
    date = telebot_calendar.calendar_query_handler(bot=bot,
                                                   call=call,
                                                   name=name,
                                                   action=action,
                                                   year=year,
                                                   month=month,
                                                   day=day)

    if action == "DAY":
        user_hotlines_dict[call.message.chat.id]['date'] = date.strftime('%d.%m')
        bot.send_message(chat_id=call.from_user.id,
                         text=f"–ü—Ä–µ–¥–º–µ—Ç: {user_hotlines_dict[call.message.chat.id]['subject']}\n"
                              f"–î–∞—Ç–∞: {date.strftime('%d.%m')}\n\n"
                              f"–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ :)",
                         reply_markup=ReplyKeyboardRemove())

        if len(user_hotlines_dict[call.message.chat.id]) == 3:
            db.set_state(call.message.from_user.username,
                         stateworker.States.S_INPUT_HOTLINE.value,
                         time.strftime('%d/%m/%y, %X'),
                         call.message.chat.id)
        else:
            db.set_state(call.message.from_user.username,
                         stateworker.States.S_CHANGE_HOTLINE.value,
                         time.strftime('%d/%m/%y, %X'),
                         call.message.chat.id)

        user_hotlines_dict[call.message.chat.id]['date'] = date.strftime('%d.%m')

    elif action == "CANCEL":
        bot.send_message(chat_id=call.from_user.id,
                         text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_INPUT_HOTLINE.value)
def input_hotline(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–•–æ—Ç–ª–∞–π–Ω –¥–ª—è <b>'{user_hotlines_dict[message.chat.id]['subject']}' </b>"
                         f"—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML')
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)
        user_hotlines_dict[message.chat.id]['addition_date'] = time.strftime('%d/%m/%y, %X')

        db.add_hotline(message.chat.id,
                       user_hotlines_dict[message.chat.id]['subject'],
                       user_hotlines_dict[message.chat.id]['description'],
                       user_hotlines_dict[message.chat.id]['date'],
                       user_hotlines_dict[message.chat.id]['addition_date'])

    else:
        user_hotlines_dict[message.chat.id]['description'] = message.text
        bot.send_message(message.chat.id,
                         f"<b>{user_hotlines_dict[message.chat.id]['subject']}</b> - "
                         f"<b>{user_hotlines_dict[message.chat.id]['description']}</b> - "
                         f"<b>{user_hotlines_dict[message.chat.id]['date']}</b>",
                         reply_markup=keyboard_generator.generate_default_keyboard_row((confirm_button,),
                                                                                       (cancel_button,)),
                         parse_mode='HTML')


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_CHANGE_HOTLINE.value)
def change_hotline(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    if message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–•–æ—Ç–ª–∞–π–Ω –¥–ª—è <b>'{user_hotlines_dict[message.chat.id]['subject']}' </b>"
                         f"—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML')
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

        db.change_hotline(user_hotlines_dict[message.chat.id]['date'],
                          user_hotlines_dict[message.chat.id]['description'],
                          message.chat.id,
                          user_hotlines_dict[message.chat.id]['subject'],
                          user_hotlines_dict[message.chat.id]['addition_date'])

    elif message.text == message.text:
        user_hotlines_dict[message.chat.id]['description'] = message.text
        bot.send_message(message.chat.id,
                         f"<b>{user_hotlines_dict[message.chat.id]['subject']}</b> - "
                         f"<b>{user_hotlines_dict[message.chat.id]['description']}</b> - "
                         f"<b>{user_hotlines_dict[message.chat.id]['date']}</b>",
                         reply_markup=keyboard_generator.generate_default_keyboard_row((confirm_button,),
                                                                                       (cancel_button,)),
                         parse_mode='HTML')


"""#####################################################################################################################
                                                    ADD LINK
#####################################################################################################################"""


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_INPUT_LINK.value)
def input_link(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ –¥–ª—è <b>'{user_links_dict[message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[message.chat.id]['subject']}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML',
                         disable_web_page_preview=True)
        user_links_dict[message.chat.id]['addition_time'] = time.strftime('%d/%m/%y %X')
        db.add_link(message.chat.id,
                    user_links_dict[message.chat.id]['subject'],
                    user_links_dict[message.chat.id]['subject_type'],
                    user_links_dict[message.chat.id]['link'],
                    user_links_dict[message.chat.id]['password'],
                    user_links_dict[message.chat.id]['addition_time'])
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == add_password_button or message.text == change_password_button:
        if user_links_dict[message.chat.id]['password'] == '':
            keyboard = keyboard_generator.generate_default_keyboard_row((change_link_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b>\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML',
                             disable_web_page_preview=True)

        elif user_links_dict[message.chat.id]['password'] != '':
            keyboard = keyboard_generator.generate_default_keyboard_row((change_link_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML',
                             disable_web_page_preview=True)

        db.set_state(message.from_user.username,
                     stateworker.States.S_INPUT_PASSWORD.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == message.text:
        user_links_dict[message.chat.id]['link'] = message.text
        if user_links_dict[message.chat.id]['password'] == '':
            keyboard = keyboard_generator.generate_default_keyboard_row((add_password_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –î–æ–±–∞–≤–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b> –∫ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ <b>'{add_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML',
                             disable_web_page_preview=True)

        elif user_links_dict[message.chat.id]['password'] != '':
            keyboard = keyboard_generator.generate_default_keyboard_row((change_password_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"<b>–ø–∞—Ä–æ–ª—å</b>: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å –∫ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ <b>'{change_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML',
                             disable_web_page_preview=True)


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_INPUT_PASSWORD.value)
def input_password(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ –¥–ª—è <b>'{user_links_dict[message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[message.chat.id]['subject']}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML',
                         disable_web_page_preview=True)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)
        user_links_dict[message.chat.id]['addition_time'] = time.strftime('%d/%m/%y %X')
        db.add_link(message.chat.id,
                    user_links_dict[message.chat.id]['subject'],
                    user_links_dict[message.chat.id]['subject_type'],
                    user_links_dict[message.chat.id]['link'],
                    user_links_dict[message.chat.id]['password'],
                    user_links_dict[message.chat.id]['addition_time'])

    elif message.text == change_link_button:
        db.set_state(message.from_user.username,
                     stateworker.States.S_INPUT_LINK.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

        if user_links_dict[message.chat.id]['password'] == '':
            keyboard = keyboard_generator.generate_default_keyboard_row((add_password_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –î–æ–±–∞–≤–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b> –∫ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ <b>'{add_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML',
                             disable_web_page_preview=True)

        elif user_links_dict[message.chat.id]['password'] != '':
            keyboard = keyboard_generator.generate_default_keyboard_row((change_password_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b> –∫ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ <b>'{change_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML',
                             disable_web_page_preview=True)

    elif message.text == message.text:
        user_links_dict[message.chat.id]['password'] = message.text
        bot.send_message(message.chat.id,
                         f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                         f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                         f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                         f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                         f"–¢—ã –º–æ–∂–µ—à—å:\n"
                         f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π)\n"
                         f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b> –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                         f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                         f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         parse_mode='HTML',
                         disable_web_page_preview=True)


"""#####################################################################################################################
                                                    CHANGE LINK
#####################################################################################################################"""


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_CHANGE_LINK.value)
def change_link(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ –¥–ª—è <b>'{user_links_dict[message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[message.chat.id]['subject']}'</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML',
                         disable_web_page_preview=True)
        db.change_link(user_links_dict[message.chat.id]['link'],  # update
                       user_links_dict[message.chat.id]['password'],
                       message.chat.id,  # where
                       user_links_dict[message.chat.id]['subject'],
                       user_links_dict[message.chat.id]['subject_type'],
                       user_links_dict[message.chat.id]['addition_date'])
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == add_password_button or message.text == change_password_button:
        if user_links_dict[message.chat.id]['password'] == '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b>\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_link_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML',
                             disable_web_page_preview=True)

        elif user_links_dict[message.chat.id]['password'] != '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_link_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML',
                             disable_web_page_preview=True)
        db.set_state(message.from_user.username,
                     stateworker.States.S_CHANGE_PASSWORD.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == message.text:
        user_links_dict[message.chat.id]['link'] = message.text
        if user_links_dict[message.chat.id]['password'] == '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –î–æ–±–∞–≤–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b>, –Ω–∞–∂–∞–≤ <b>'{add_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (add_password_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML',
                             disable_web_page_preview=True)

        elif user_links_dict[message.chat.id]['password'] != '':
            user_links_dict[message.chat.id]['link'] = message.text
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b>, –Ω–∞–∂–∞–≤ <b>'{change_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_password_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML',
                             disable_web_page_preview=True)


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[
                                              0] == stateworker.States.S_CHANGE_PASSWORD.value)
def change_password(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ –¥–ª—è <b>'{user_links_dict[message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[message.chat.id]['subject']}'</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML',
                         disable_web_page_preview=True)
        db.change_link(user_links_dict[message.chat.id]['link'],
                       user_links_dict[message.chat.id]['password'],
                       message.chat.id,
                       user_links_dict[message.chat.id]['subject'],
                       user_links_dict[message.chat.id]['subject_type'],
                       user_links_dict[message.chat.id]['addition_date'])
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == change_link_button:
        if user_links_dict[message.chat.id]['password'] == '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –î–æ–±–∞–≤–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b>, –Ω–∞–∂–∞–≤ <b>'{add_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (add_password_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML',
                             disable_web_page_preview=True)

        elif user_links_dict[message.chat.id]['password'] != '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b>, –Ω–∞–∂–∞–≤ <b>'{change_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_password_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML',
                             disable_web_page_preview=True)
        db.set_state(message.from_user.username,
                     stateworker.States.S_CHANGE_LINK.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == message.text:
        user_links_dict[message.chat.id]['password'] = message.text
        if user_links_dict[message.chat.id]['password'] == '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b>\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_link_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML',
                             disable_web_page_preview=True)

        elif user_links_dict[message.chat.id]['password'] != '':
            user_links_dict[message.chat.id]['password'] = message.text
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_link_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML',
                             disable_web_page_preview=True)


"""#####################################################################################################################
                                                    MAIN MENU/HOTLINES MENU
#####################################################################################################################"""

"""#####################################################################################################################
                                                    SCHEDULE MENU
#####################################################################################################################"""


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_SCHEDULE_MENU.value)
def schedule_menu(message):
    if message.text == back_button:
        bot.send_message(message.chat.id,
                         f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == today_day_button:
        bot.send_message(message.chat.id,
                         show_day(message.chat.id, f"–°–µ–≥–æ–¥–Ω—è", date.today().weekday() + 1),
                         parse_mode="HTML",
                         reply_markup=keyboard_generator.schedule_menu_keyboard,
                         disable_web_page_preview=True)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SCHEDULE_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == tomorrow_day_button:
        bot.send_message(message.chat.id,
                         show_day(message.chat.id, "–ó–∞–≤—Ç—Ä–∞", (date.today() + datetime.timedelta(days=1)).weekday() + 1),
                         parse_mode="HTML",
                         reply_markup=keyboard_generator.schedule_menu_keyboard,
                         disable_web_page_preview=True)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SCHEDULE_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == week1_button:
        bot.send_message(message.chat.id,
                         f"–ê —Ç–µ–ø–µ—Ä—å –¥–µ–Ω—å",
                         reply_markup=keyboard_generator.week1_day_choose_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SCHEDULE_WEEK_VIEW.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == week2_button:
        bot.send_message(message.chat.id,
                         f"–ê —Ç–µ–ø–µ—Ä—å –¥–µ–Ω—å",
                         reply_markup=keyboard_generator.week2_day_choose_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SCHEDULE_WEEK_VIEW.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[
                                              0] == stateworker.States.S_SCHEDULE_WEEK_VIEW.value)
def week_view(message):
    for i in range(0, 5):
        if message.text == week1_day_buttons[i]:
            bot.send_message(message.chat.id,
                             Schedule.show_schedule(message.chat.id, 1, i + 1, week_days[i + 1]),
                             parse_mode="HTML",
                             reply_markup=keyboard_generator.week1_day_choose_keyboard,
                             disable_web_page_preview=True)
            db.set_state(message.from_user.username,
                         stateworker.States.S_SCHEDULE_WEEK_VIEW.value,
                         time.strftime('%d/%m/%y, %X'),
                         message.chat.id)

        elif message.text == week2_day_buttons[i]:
            bot.send_message(message.chat.id,
                             Schedule.show_schedule(message.chat.id, 2, i + 1, week_days[i + 1]),
                             parse_mode="HTML",
                             reply_markup=keyboard_generator.week2_day_choose_keyboard,
                             disable_web_page_preview=True)
            db.set_state(message.from_user.username,
                         stateworker.States.S_SCHEDULE_WEEK_VIEW.value,
                         time.strftime('%d/%m/%y, %X'),
                         message.chat.id)

    if message.text == back_button:
        bot.send_message(message.chat.id,
                         f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",
                         reply_markup=keyboard_generator.schedule_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SCHEDULE_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)


"""#####################################################################################################################
                                                    SETTINGS MENU
#####################################################################################################################"""


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_SETTINGS_MENU.value)
def settings_menu(message):
    if message.text == back_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    if message.text == notifications_button:
        bot.reply_to(message,
                     service.not_available_reply)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SETTINGS_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    if message.text == change_group_button:
        bot.send_message(message.chat.id,
                         f"–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
                         reply_markup=keyboard_generator.generate_default_keyboard(cancel_button))
        db.set_state(message.from_user.username,
                     stateworker.States.S_CHANGE_GROUP.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                         reply_markup=keyboard_generator.settings_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SETTINGS_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)


bot.polling()
