import datetime
import os
import time

from schedule_parser.schedule_parser import *
from service import keyboard_generator, stateworker
from service import service
from service.buttons import *

bot = telebot.TeleBot(os.environ['BOT_TOKEN'])
db.init_db()

"""#####################################################################################################################
                                                    START
#####################################################################################################################"""


@bot.message_handler(commands=['start', 'START'])
def start_message(message):
    user_name = message.from_user.first_name
    if message.from_user.last_name:
        user_name = f"{user_name} {message.from_user.last_name}"

    if db.get_user_info(message.chat.id) is None:
        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏–≤–µ—Ç, {user_name}! ü•¥ü§ô\nZ-Moves –Ω–∞ —Å–≤—è–∑–∏ üòé\n\n"
                         f"–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.\n\n–ü—Ä–∏–º–µ—Ä: <b>IO-83<</b>",
                         parse_mode='HTML')
        db.register_user(message.chat.id,
                         message.from_user.username,
                         stateworker.States.S_REGISTRATION.value,
                         time.strftime('%d/%m/%y, %X'),
                         time.strftime('%d/%m/%y, %X'))

    elif db.get_user_info(message.chat.id)[2] is None:
        bot.send_message(message.chat.id,
                         f"–ü–µ—Ä–µ—Å—Ç–∞–Ω—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è. –í–≤–µ–¥–∏ –≥—Ä—É–ø–ø—É –ø–ª–µ—Å")

    else:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)


@bot.message_handler(func=lambda message: (db.get_state(message.chat.id).__class__ == tuple and
                                           db.get_state(message.chat.id)[
                                               0] == stateworker.States.S_REGISTRATION.value) or

                                          (db.get_state(message.chat.id).__class__ == tuple and
                                           db.get_state(message.chat.id)[0] == stateworker.States.S_CHANGE_GROUP.value))
def group_registration(message):
    if Schedule.is_group_exist(message.text):
        bot.send_message(message.chat.id,
                         f"–ï—Å—Ç—å —Ç–∞–∫–∞—è! –ù—É –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º üôÇ",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.register_user_group_name(message.from_user.username,
                                    message.text,
                                    stateworker.States.S_MAIN_MENU.value,
                                    time.strftime('%d/%m/%y, %X'),
                                    message.chat.id)

    elif message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                         reply_markup=keyboard_generator.settings_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SETTINGS_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    else:
        bot.send_message(message.chat.id, '<b>{}</b>? –ß—Ç–æ-—Ç–æ —è –æ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –µ—â—ë –Ω–µ —Å–ª—ã—à–∞–ª ü§•'
                                          '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.'.format(message.text), parse_mode='HTML')
        db.set_state(message.from_user.username,
                     stateworker.States.S_REGISTRATION.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)


"""#####################################################################################################################
                                                    MAIN MENU
#####################################################################################################################"""


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_MAIN_MENU.value)
def main_menu(message):
    if message.text == schedule_button:
        bot.send_message(message.chat.id,
                         f"–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                         reply_markup=keyboard_generator.schedule_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SCHEDULE_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == settings_button:
        bot.send_message(message.chat.id,
                         f"–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
                         reply_markup=keyboard_generator.settings_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_SETTINGS_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == links_button:
        bot.send_message(message.chat.id,
                         f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º, –∏–∑–º–µ–Ω—è—Ç—å –∏ –¥–∞–∂–µ –∏—Ö —É–¥–∞–ª—è—Ç—å, "
                         f"–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.",
                         reply_markup=service.dynamic_menu_links_inline_keyboard_generator(message.chat.id))
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == hotlines_button:
        bot.reply_to(message,
                     service.not_available_reply)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == mails_button:
        bot.reply_to(message,
                     service.not_available_reply)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == info_button:
        bot.reply_to(message,
                     service.not_available_reply)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == help_button:
        bot.reply_to(message,
                     service.not_available_reply)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)


user_links_dict = {}


@bot.callback_query_handler(func=lambda call: True)
def links_menu(call):
    inline_subject_keyboard = service.generate_inline_subjects(call.message.chat.id)
    inline_linked_subject_keyboard_to_ch = service.generate_inline_linked_subjects_to_change(call.message.chat.id)
    inline_linked_subject_keyboard_to_rm = service.generate_inline_linked_subjects_to_remove(call.message.chat.id)
    inline_subject_type_keyboard = telebot.types.InlineKeyboardMarkup()
    inline_subject_type_keyboard.add(inline_lec_button, inline_lab_button, inline_prac_button)
    inline_subject_type_keyboard.add(inline_second_back_button)
    inline_confirm_cancel_keyboard = telebot.types.InlineKeyboardMarkup()
    inline_confirm_cancel_keyboard.add(inline_remove_link_cancel_button, inline_remove_link_confirm_button)

    if call.data == 'add_link' or call.data == 'second_back_button':
        user_links_dict.update({call.message.chat.id: {
            'subject': '',
            'subject_type': '',
            'link': '',
            'password': ''}})
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_subject_keyboard,
                              parse_mode='HTML')

    elif call.data == 'change_link':
        user_links_dict.update({call.message.chat.id: {
            'subject': '',
            'subject_type': '',
            'link': '',
            'password': ''}})
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_linked_subject_keyboard_to_ch,
                              parse_mode='HTML')

    elif call.data == 'remove_link':
        user_links_dict.update({call.message.chat.id: {
            'subject': '',
            'subject_type': '',
            'link': '',
            'password': ''}})
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_linked_subject_keyboard_to_rm,
                              parse_mode='HTML')

    elif call.data == 'first_back_button':
        bot.edit_message_text(f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º, –∏–∑–º–µ–Ω—è—Ç—å –∏ –¥–∞–∂–µ –∏—Ö —É–¥–∞–ª—è—Ç—å, "
                              f"–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=service.dynamic_menu_links_inline_keyboard_generator(call.message.chat.id),
                              parse_mode='HTML')

    # jump to ADD_LINK state
    elif call.data in [button['callback_data'] for buttons in inline_subject_keyboard.to_dict()['inline_keyboard']
                       for button in buttons]:
        for buttons in inline_subject_keyboard.to_dict()['inline_keyboard'][
                       :len(inline_subject_keyboard.to_dict()['inline_keyboard']) - 1]:  # —Ç—É—Ç -1 —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏–ª–∞—Å—å –±—ç–∫-–∫–Ω–æ–ø–∫–∞
            for button in buttons:
                if button['callback_data'] == call.data:
                    user_links_dict[call.message.chat.id]['subject'] = button['text']
                    bot.edit_message_text(f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n\n"
                                          f"–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è üôÉ",
                                          chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          reply_markup=inline_subject_type_keyboard,
                                          parse_mode='HTML')

    elif call.data in [button['callback_data'] for buttons in inline_subject_type_keyboard.to_dict()['inline_keyboard']
                       for button in buttons]:
        for button in inline_subject_type_keyboard.to_dict()['inline_keyboard'][0]:  # —Ç—É—Ç [0] —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏–ª–∞—Å—å –±—ç–∫-–∫–Ω–æ–ø–∫–∞
            if button['callback_data'] == call.data:
                user_links_dict[call.message.chat.id]['subject_type'] = button['text']
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                keyboard = keyboard_generator.generate_default_keyboard(cancel_button)
                bot.send_message(call.message.chat.id,
                                 f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                 f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n\n"
                                 f"–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ—à—É —Å–∫–∏–Ω—É—Ç—å –º–Ω–µ —Å—Å—ã–ª–æ—á–∫—É ü§ì",
                                 reply_markup=keyboard,
                                 parse_mode='HTML')
                db.set_state(call.message.from_user.username,
                             stateworker.States.S_INPUT_LINK.value,
                             time.strftime('%d/%m/%y, %X'),
                             call.message.chat.id)

    # jump to CHANGE_LINK state
    elif call.data in [button['callback_data'] for buttons in
                       inline_linked_subject_keyboard_to_ch.to_dict()['inline_keyboard'] for button in buttons]:
        for buttons in inline_linked_subject_keyboard_to_ch.to_dict()['inline_keyboard'][
                       :len(inline_linked_subject_keyboard_to_ch.to_dict()['inline_keyboard']) - 1]:  # —Ç—É—Ç -1 —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏–ª–∞—Å—å –±—ç–∫-–∫–Ω–æ–ø–∫–∞
            for button in buttons:
                if button['callback_data'] == call.data:
                    user_links_dict.update({call.message.chat.id: {
                        'subject': button['text'][int(button['text'].find('-')) + 2:],  # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ '- '
                        'subject_type': button['text'][:int(button['text'].find(' '))],  # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ ' '
                        'link': '',
                        'password': ''}})
                    user_links_dict[call.message.chat.id]['link'] = \
                        db.get_links_to_change(call.message.chat.id,
                                               user_links_dict[call.message.chat.id]['subject'],
                                               user_links_dict[call.message.chat.id]['subject_type'])[3]  # 3 - —Å—Å—ã–ª–∫–∞
                    user_links_dict[call.message.chat.id]['password'] = \
                        db.get_links_to_change(call.message.chat.id,
                                               user_links_dict[call.message.chat.id]['subject'],
                                               user_links_dict[call.message.chat.id]['subject_type'])[4]  # 4 - –ø–∞—Ä–æ–ª—å
                    bot.delete_message(chat_id=call.message.chat.id,
                                       message_id=call.message.message_id)

                    if user_links_dict[call.message.chat.id]['password'] == '':
                        bot.send_message(call.message.chat.id,
                                         f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                         f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n"
                                         f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[call.message.chat.id]['link']}</b>\n",
                                         reply_markup=keyboard_generator.generate_default_keyboard_row(
                                             (add_password_button, confirm_button),
                                             (cancel_button,)),
                                         parse_mode='HTML')

                    elif user_links_dict[call.message.chat.id]['password'] != '':
                        bot.send_message(call.message.chat.id,
                                         f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                         f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n"
                                         f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[call.message.chat.id]['link']}</b>\n"
                                         f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[call.message.chat.id]['password']}</b>\n",
                                         reply_markup=keyboard_generator.generate_default_keyboard_row(
                                             (change_password_button, confirm_button),
                                             (cancel_button,)),
                                         parse_mode='HTML')

                    db.set_state(call.message.from_user.username,
                                 stateworker.States.S_CHANGE_LINK.value,
                                 time.strftime('%d/%m/%y, %X'),
                                 call.message.chat.id)

    # remove link
    elif call.data in [button['callback_data'] for buttons in
                       inline_linked_subject_keyboard_to_rm.to_dict()['inline_keyboard'] for button in buttons]:
        for buttons in inline_linked_subject_keyboard_to_rm.to_dict()['inline_keyboard'][
                       :len(inline_linked_subject_keyboard_to_rm.to_dict()['inline_keyboard']) - 1]:  # —Ç—É—Ç -1 —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏–ª–∞—Å—å –±—ç–∫-–∫–Ω–æ–ø–∫–∞
            for button in buttons:
                if button['callback_data'] == call.data:
                    user_links_dict.update({call.message.chat.id: {
                        'subject': button['text'][int(button['text'].find('-')) + 2:],  # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ '- '
                        'subject_type': button['text'][:int(button['text'].find(' '))],  # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ ' '
                        'link': '',
                        'password': ''}})
                    user_links_dict[call.message.chat.id]['link'] = \
                        db.get_links_to_change(call.message.chat.id,
                                               user_links_dict[call.message.chat.id]['subject'],
                                               user_links_dict[call.message.chat.id]['subject_type'])[3]  # 3 - —Å—Å—ã–ª–∫–∞
                    user_links_dict[call.message.chat.id]['password'] = \
                        db.get_links_to_change(call.message.chat.id,
                                               user_links_dict[call.message.chat.id]['subject'],
                                               user_links_dict[call.message.chat.id]['subject_type'])[4]  # 4 - –ø–∞—Ä–æ–ª—å

                    if user_links_dict[call.message.chat.id]['password'] == '':
                        bot.edit_message_text(f"–¢—ã —É–¥–∞–ª—è–µ—à—å:\n"
                                              f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                              f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n"
                                              f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[call.message.chat.id]['link']}</b>\n",
                                              chat_id=call.message.chat.id,
                                              message_id=call.message.message_id,
                                              reply_markup=inline_confirm_cancel_keyboard,
                                              parse_mode='HTML')

                    elif user_links_dict[call.message.chat.id]['password'] != '':
                        bot.edit_message_text(f"–¢—ã —É–¥–∞–ª—è–µ—à—å:\n"
                                              f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[call.message.chat.id]['subject']}</b>\n"
                                              f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[call.message.chat.id]['subject_type']}</b>\n"
                                              f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[call.message.chat.id]['link']}</b>\n"
                                              f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[call.message.chat.id]['password']}</b>",
                                              chat_id=call.message.chat.id,
                                              message_id=call.message.message_id,
                                              reply_markup=inline_confirm_cancel_keyboard,
                                              parse_mode='HTML')

    elif call.data == 'confirm_remove_link':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        db.remove_link(call.message.chat.id, user_links_dict[call.message.chat.id]['subject'],
                       user_links_dict[call.message.chat.id]['subject_type'])
        bot.send_message(call.message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ <i>'{user_links_dict[call.message.chat.id]['link']}'</i> –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç "
                         f"'<b>{user_links_dict[call.message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[call.message.chat.id]['subject']}</b>' "
                         f"—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML')

    elif call.data == 'cancel_remove_link':
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=inline_linked_subject_keyboard_to_rm,
                              parse_mode='HTML')


"""#####################################################################################################################
                                                    ADD LINK
#####################################################################################################################"""


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_INPUT_LINK.value)
def input_link(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ –¥–ª—è <b>'{user_links_dict[message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[message.chat.id]['subject']}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML')
        db.add_link(message.chat.id,
                    user_links_dict[message.chat.id]['subject'],
                    user_links_dict[message.chat.id]['subject_type'],
                    user_links_dict[message.chat.id]['link'],
                    user_links_dict[message.chat.id]['password'])
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == add_password_button or message.text == change_password_button:
        if user_links_dict[message.chat.id]['password'] == '':
            keyboard = keyboard_generator.generate_default_keyboard_row((change_link_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b>\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML')

        elif user_links_dict[message.chat.id]['password'] != '':
            keyboard = keyboard_generator.generate_default_keyboard_row((change_link_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML')

        db.set_state(message.from_user.username,
                     stateworker.States.S_INPUT_PASSWORD.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == message.text:
        user_links_dict[message.chat.id]['link'] = message.text
        if user_links_dict[message.chat.id]['password'] == '':
            keyboard = keyboard_generator.generate_default_keyboard_row((add_password_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –î–æ–±–∞–≤–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b> –∫ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ <b>'{add_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML')

        elif user_links_dict[message.chat.id]['password'] != '':
            keyboard = keyboard_generator.generate_default_keyboard_row((change_password_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"<b>–ø–∞—Ä–æ–ª—å</b>: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å –∫ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ <b>'{change_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML')


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_INPUT_PASSWORD.value)
def input_password(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ –¥–ª—è <b>'{user_links_dict[message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[message.chat.id]['subject']}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)
        db.add_link(message.chat.id,
                    user_links_dict[message.chat.id]['subject'],
                    user_links_dict[message.chat.id]['subject_type'],
                    user_links_dict[message.chat.id]['link'],
                    user_links_dict[message.chat.id]['password'])

    elif message.text == change_link_button:
        db.set_state(message.from_user.username,
                     stateworker.States.S_INPUT_LINK.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

        if user_links_dict[message.chat.id]['password'] == '':
            keyboard = keyboard_generator.generate_default_keyboard_row((add_password_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –î–æ–±–∞–≤–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b> –∫ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ <b>'{add_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML')

        elif user_links_dict[message.chat.id]['password'] != '':
            keyboard = keyboard_generator.generate_default_keyboard_row((change_password_button, confirm_button),
                                                                        (cancel_button,))
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b> –∫ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ <b>'{change_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard,
                             parse_mode='HTML')

    elif message.text == message.text:
        user_links_dict[message.chat.id]['password'] = message.text
        bot.send_message(message.chat.id,
                         f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                         f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                         f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                         f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                         f"–¢—ã –º–æ–∂–µ—à—å:\n"
                         f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π)\n"
                         f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b> –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                         f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                         f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         parse_mode='HTML')


"""#####################################################################################################################
                                                    CHANGE LINK
#####################################################################################################################"""


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_CHANGE_LINK.value)
def change_link(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ –¥–ª—è <b>'{user_links_dict[message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[message.chat.id]['subject']}'</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML')
        db.change_link(user_links_dict[message.chat.id]['link'],
                       user_links_dict[message.chat.id]['password'],
                       message.chat.id,
                       user_links_dict[message.chat.id]['subject'],
                       user_links_dict[message.chat.id]['subject_type'])
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == add_password_button or message.text == change_password_button:
        if user_links_dict[message.chat.id]['password'] == '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b>\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_link_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML')

        elif user_links_dict[message.chat.id]['password'] != '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_link_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML')
        db.set_state(message.from_user.username,
                     stateworker.States.S_CHANGE_PASSWORD.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == message.text:
        user_links_dict[message.chat.id]['link'] = message.text
        if user_links_dict[message.chat.id]['password'] == '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –î–æ–±–∞–≤–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b>, –Ω–∞–∂–∞–≤ <b>'{add_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (add_password_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML',
                             disable_web_page_preview=True)

        elif user_links_dict[message.chat.id]['password'] != '':
            user_links_dict[message.chat.id]['link'] = message.text
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b>, –Ω–∞–∂–∞–≤ <b>'{change_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_password_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML')


@bot.message_handler(func=lambda message: db.get_state(message.chat.id).__class__ == tuple and
                                          db.get_state(message.chat.id)[0] == stateworker.States.S_CHANGE_PASSWORD.value)
def change_password(message):
    if message.text == cancel_button:
        bot.send_message(message.chat.id,
                         f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == confirm_button:
        bot.send_message(message.chat.id,
                         f"–°—Å—ã–ª–∫–∞ –¥–ª—è <b>'{user_links_dict[message.chat.id]['subject_type']}</b> - "
                         f"<b>{user_links_dict[message.chat.id]['subject']}'</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.",
                         reply_markup=keyboard_generator.main_menu_keyboard,
                         parse_mode='HTML')
        db.change_link(user_links_dict[message.chat.id]['link'],
                       user_links_dict[message.chat.id]['password'],
                       message.chat.id,
                       user_links_dict[message.chat.id]['subject'],
                       user_links_dict[message.chat.id]['subject_type'])
        db.set_state(message.from_user.username,
                     stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == change_link_button:
        if user_links_dict[message.chat.id]['password'] == '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –î–æ–±–∞–≤–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b>, –Ω–∞–∂–∞–≤ <b>'{add_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (add_password_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML')

        elif user_links_dict[message.chat.id]['password'] != '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>–ø–∞—Ä–æ–ª—å</b>, –Ω–∞–∂–∞–≤ <b>'{change_password_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_password_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML')
        db.set_state(message.from_user.username,
                     stateworker.States.S_CHANGE_LINK.value,
                     time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == message.text:
        user_links_dict[message.chat.id]['password'] = message.text
        if user_links_dict[message.chat.id]['password'] == '':
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b>\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_link_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML')

        elif user_links_dict[message.chat.id]['password'] != '':
            user_links_dict[message.chat.id]['password'] = message.text
            bot.send_message(message.chat.id,
                             f"–ü—Ä–µ–¥–º–µ—Ç: <b>{user_links_dict[message.chat.id]['subject']}</b>\n"
                             f"–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: <b>{user_links_dict[message.chat.id]['subject_type']}</b>\n"
                             f"–°—Å—ã–ª–∫–∞: <b>{user_links_dict[message.chat.id]['link']}</b>\n"
                             f"–ü–∞—Ä–æ–ª—å: <b>{user_links_dict[message.chat.id]['password']}</b>\n\n"
                             f"–¢—ã –º–æ–∂–µ—à—å:\n"
                             f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ <b>–ø–∞—Ä–æ–ª—å</b> –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π)\n"
                             f"2. –ò–∑–º–µ–Ω–∏—Ç—å <b>—Å—Å—ã–ª–∫—É</b>, –Ω–∞–∂–∞–≤ <b>'{change_link_button}'</b>\n"
                             f"3. –ù–∞–∂–∞—Ç—å <b>'{confirm_button}'</b> (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                             f"4. –ù–∞–∂–∞—Ç—å <b>'{cancel_button}'</b> (—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏) –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard_generator.generate_default_keyboard_row(
                                 (change_link_button, confirm_button),
                                 (cancel_button,)),
                             parse_mode='HTML')


"""#####################################################################################################################
                                                    SCHEDULE MENU
#####################################################################################################################"""


@bot.message_handler(
    func=lambda message: db.get_state(message.chat.id).__class__ == tuple and db.get_state(message.chat.id)[
        0] == stateworker.States.S_SCHEDULE_MENU.value)
def schedule_menu(message):
    if message.text == back_button:
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...', reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username, stateworker.States.S_MAIN_MENU.value, time.strftime('%d/%m/%y, %X'),
                     message.chat.id)

    elif message.text == today_day_button:
        s = show_day(message.chat.id, "–°–µ–≥–æ–¥–Ω—è", date.today().weekday() + 1)
        bot.send_message(message.chat.id, s, parse_mode="HTML", reply_markup=keyboard_generator.schedule_menu_keyboard)
        db.set_state(message.from_user.username, stateworker.States.S_SCHEDULE_MENU.value,
                     time.strftime('%d/%m/%y, %X'), message.chat.id)

    elif message.text == tomorrow_day_button:
        tomorrow = (date.today() + datetime.timedelta(days=1)).weekday() + 1
        s = show_day(message.chat.id, "–ó–∞–≤—Ç—Ä–∞", tomorrow)
        bot.send_message(message.chat.id, s, parse_mode="HTML", reply_markup=keyboard_generator.schedule_menu_keyboard)
        db.set_state(message.from_user.username, stateworker.States.S_SCHEDULE_MENU.value,
                     time.strftime('%d/%m/%y, %X'), message.chat.id)

    elif message.text == week1_button:
        bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å –¥–µ–Ω—å', reply_markup=keyboard_generator.week1_day_choose_keyboard)
        db.set_state(message.from_user.username, stateworker.States.S_SCHEDULE_WEEK_VIEW.value,
                     time.strftime('%d/%m/%y, %X'), message.chat.id)

    elif message.text == week2_button:
        bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å –¥–µ–Ω—å', reply_markup=keyboard_generator.week2_day_choose_keyboard)
        db.set_state(message.from_user.username, stateworker.States.S_SCHEDULE_WEEK_VIEW.value,
                     time.strftime('%d/%m/%y, %X'), message.chat.id)


@bot.message_handler(
    func=lambda message: db.get_state(message.chat.id).__class__ == tuple and db.get_state(message.chat.id)[
        0] == stateworker.States.S_SCHEDULE_WEEK_VIEW.value)
def week_view(message):
    for i in range(0, 5):
        if message.text == week1_day_buttons[i]:
            bot.send_message(message.chat.id, Schedule.show_schedule(message.chat.id, 1, i + 1, week_days[i + 1]),
                             parse_mode="HTML", reply_markup=keyboard_generator.week1_day_choose_keyboard)
            db.set_state(message.from_user.username, stateworker.States.S_SCHEDULE_WEEK_VIEW.value,
                         time.strftime('%d/%m/%y, %X'), message.chat.id)

        elif message.text == week2_day_buttons[i]:
            bot.send_message(message.chat.id, Schedule.show_schedule(message.chat.id, 2, i + 1, week_days[i + 1]),
                             parse_mode="HTML", reply_markup=keyboard_generator.week2_day_choose_keyboard)
            db.set_state(message.from_user.username, stateworker.States.S_SCHEDULE_WEEK_VIEW.value,
                         time.strftime('%d/%m/%y, %X'), message.chat.id)

    if message.text == back_button:
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...', reply_markup=keyboard_generator.schedule_menu_keyboard)
        db.set_state(message.from_user.username, stateworker.States.S_SCHEDULE_MENU.value,
                     time.strftime('%d/%m/%y, %X'), message.chat.id)


"""#####################################################################################################################
                                                    SETTINGS MENU
#####################################################################################################################"""


@bot.message_handler(
    func=lambda message: db.get_state(message.chat.id).__class__ == tuple and db.get_state(message.chat.id)[
        0] == stateworker.States.S_SETTINGS_MENU.value)
def settings_menu(message):
    if message.text == back_button:
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard_generator.main_menu_keyboard)
        db.set_state(message.from_user.username, stateworker.States.S_MAIN_MENU.value,
                     time.strftime('%d/%m/%y, %X'), message.chat.id)

    if message.text == notifications_button:
        bot.reply_to(message, service.not_available_reply)
        db.set_state(message.from_user.username, stateworker.States.S_SETTINGS_MENU.value,
                     time.strftime('%d/%m/%y, %X'), message.chat.id)

    if message.text == change_group_button:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã',
                         reply_markup=keyboard_generator.generate_default_keyboard(cancel_button))
        db.set_state(message.from_user.username, stateworker.States.S_CHANGE_GROUP.value,
                     time.strftime('%d/%m/%y, %X'), message.chat.id)

    if message.text == cancel_button:
        bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=keyboard_generator.settings_menu_keyboard)
        db.set_state(message.from_user.username, stateworker.States.S_SETTINGS_MENU.value,
                     time.strftime('%d/%m/%y, %X'), message.chat.id)


bot.polling()
